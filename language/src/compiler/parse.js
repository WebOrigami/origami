// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/



//
// Origami language parser
//
// This generally follows the pattern of the JavaScript expression grammar at
// https://github.com/pegjs/pegjs/blob/master/examples/javascript.pegjs. Like
// that parser, this one uses the ECMAScript grammar terms where relevant.
//
// Generate the parser via `npm build`.
//
// @ts-nocheck
//

import * as ops from "../runtime/ops.js";
import {
  annotate,
  applyMacro,
  makeArray,
  makeBinaryOperation,
  makeCall,
  makeDeferredArguments,
  makeDocument,
  makeObject,
  makePath,
  makePipeline,
  makeTemplate,
  makeUnaryOperation,
  makeYamlObject,
  markers,
} from "./parserHelpers.js";
import isOrigamiFrontMatter from "./isOrigamiFrontMatter.js";


class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    __: peg$parse__,
    additiveExpression: peg$parseadditiveExpression,
    additiveOperator: peg$parseadditiveOperator,
    angleBracketLiteral: peg$parseangleBracketLiteral,
    angleBracketPath: peg$parseangleBracketPath,
    angleBracketKey: peg$parseangleBracketKey,
    angleBracketPathChar: peg$parseangleBracketPathChar,
    arguments: peg$parsearguments,
    arrayLiteral: peg$parsearrayLiteral,
    arrayEntries: peg$parsearrayEntries,
    arrayEntry: peg$parsearrayEntry,
    arrowFunction: peg$parsearrowFunction,
    bitwiseAndExpression: peg$parsebitwiseAndExpression,
    bitwiseAndOperator: peg$parsebitwiseAndOperator,
    bitwiseOrExpression: peg$parsebitwiseOrExpression,
    bitwiseOrOperator: peg$parsebitwiseOrOperator,
    bitwiseXorExpression: peg$parsebitwiseXorExpression,
    bitwiseXorOperator: peg$parsebitwiseXorOperator,
    callExpression: peg$parsecallExpression,
    commaExpression: peg$parsecommaExpression,
    comment: peg$parsecomment,
    computedPropertyAccess: peg$parsecomputedPropertyAccess,
    computedPropertySpace: peg$parsecomputedPropertySpace,
    conditionalExpression: peg$parseconditionalExpression,
    digits: peg$parsedigits,
    doubleArrow: peg$parsedoubleArrow,
    doubleQuoteString: peg$parsedoubleQuoteString,
    doubleQuoteStringChar: peg$parsedoubleQuoteStringChar,
    ellipsis: peg$parseellipsis,
    equalityExpression: peg$parseequalityExpression,
    equalityOperator: peg$parseequalityOperator,
    escapedChar: peg$parseescapedChar,
    expectBacktick: peg$parseexpectBacktick,
    expectClosingBrace: peg$parseexpectClosingBrace,
    expectClosingBracket: peg$parseexpectClosingBracket,
    expectClosingParenthesis: peg$parseexpectClosingParenthesis,
    expectDoubleQuote: peg$parseexpectDoubleQuote,
    expectExpression: peg$parseexpectExpression,
    expectFrontDelimiter: peg$parseexpectFrontDelimiter,
    expectGuillemet: peg$parseexpectGuillemet,
    expectSingleQuote: peg$parseexpectSingleQuote,
    expectPipelineExpression: peg$parseexpectPipelineExpression,
    expectUnaryExpression: peg$parseexpectUnaryExpression,
    exponentiationExpression: peg$parseexponentiationExpression,
    expression: peg$parseexpression,
    floatLiteral: peg$parsefloatLiteral,
    frontDelimiter: peg$parsefrontDelimiter,
    frontMatterExpression: peg$parsefrontMatterExpression,
    frontMatterText: peg$parsefrontMatterText,
    frontMatterYaml: peg$parsefrontMatterYaml,
    group: peg$parsegroup,
    guillemetString: peg$parseguillemetString,
    guillemetStringChar: peg$parseguillemetStringChar,
    host: peg$parsehost,
    hostname: peg$parsehostname,
    identifier: peg$parseidentifier,
    identifierLiteral: peg$parseidentifierLiteral,
    identifierPart: peg$parseidentifierPart,
    identifierStart: peg$parseidentifierStart,
    implicitParenthesesCallExpression: peg$parseimplicitParenthesesCallExpression,
    implicitParensthesesArguments: peg$parseimplicitParensthesesArguments,
    inlineSpace: peg$parseinlineSpace,
    integerLiteral: peg$parseintegerLiteral,
    key: peg$parsekey,
    keyChar: peg$parsekeyChar,
    keyCharStart: peg$parsekeyCharStart,
    list: peg$parselist,
    logicalAndExpression: peg$parselogicalAndExpression,
    logicalOrExpression: peg$parselogicalOrExpression,
    minus: peg$parseminus,
    multiLineComment: peg$parsemultiLineComment,
    multiplicativeExpression: peg$parsemultiplicativeExpression,
    multiplicativeOperator: peg$parsemultiplicativeOperator,
    newExpression: peg$parsenewExpression,
    newLine: peg$parsenewLine,
    numericLiteral: peg$parsenumericLiteral,
    nullishCoalescingExpression: peg$parsenullishCoalescingExpression,
    objectLiteral: peg$parseobjectLiteral,
    objectEntries: peg$parseobjectEntries,
    objectEntry: peg$parseobjectEntry,
    objectGetter: peg$parseobjectGetter,
    objectHiddenKey: peg$parseobjectHiddenKey,
    objectKey: peg$parseobjectKey,
    objectProperty: peg$parseobjectProperty,
    objectShorthandProperty: peg$parseobjectShorthandProperty,
    objectPublicKey: peg$parseobjectPublicKey,
    optionalChaining: peg$parseoptionalChaining,
    parameter: peg$parseparameter,
    parameterList: peg$parseparameterList,
    parameterSingleton: peg$parseparameterSingleton,
    parenthesesArguments: peg$parseparenthesesArguments,
    pathArguments: peg$parsepathArguments,
    pathKeys: peg$parsepathKeys,
    pathLiteral: peg$parsepathLiteral,
    pathSegment: peg$parsepathSegment,
    pipelineExpression: peg$parsepipelineExpression,
    primary: peg$parseprimary,
    program: peg$parseprogram,
    programMode: peg$parseprogramMode,
    propertyAccess: peg$parsepropertyAccess,
    regexFlags: peg$parseregexFlags,
    regexLiteral: peg$parseregexLiteral,
    regexLiteralChar: peg$parseregexLiteralChar,
    relationalExpression: peg$parserelationalExpression,
    relationalOperator: peg$parserelationalOperator,
    separator: peg$parseseparator,
    shebang: peg$parseshebang,
    shellMode: peg$parseshellMode,
    shiftExpression: peg$parseshiftExpression,
    shiftOperator: peg$parseshiftOperator,
    shorthandFunction: peg$parseshorthandFunction,
    singleArrow: peg$parsesingleArrow,
    singleLineComment: peg$parsesingleLineComment,
    singleQuoteString: peg$parsesingleQuoteString,
    singleQuoteStringChar: peg$parsesingleQuoteStringChar,
    slash: peg$parseslash,
    slashes: peg$parseslashes,
    slashFollows: peg$parseslashFollows,
    spreadElement: peg$parsespreadElement,
    stringLiteral: peg$parsestringLiteral,
    templateBody: peg$parsetemplateBody,
    templateBodyChar: peg$parsetemplateBodyChar,
    templateBodyText: peg$parsetemplateBodyText,
    templateDocument: peg$parsetemplateDocument,
    templateLiteral: peg$parsetemplateLiteral,
    templateLiteralChar: peg$parsetemplateLiteralChar,
    templateLiteralText: peg$parsetemplateLiteralText,
    templateSubstitution: peg$parsetemplateSubstitution,
    textChar: peg$parsetextChar,
    unaryExpression: peg$parseunaryExpression,
    unaryOperator: peg$parseunaryOperator,
    uri: peg$parseuri,
    uriExpression: peg$parseuriExpression,
    uriKey: peg$parseuriKey,
    uriKeyChar: peg$parseuriKeyChar,
    uriPath: peg$parseuriPath,
    uriScheme: peg$parseuriScheme,
    whitespace: peg$parsewhitespace,
    whitespaceChar: peg$parsewhitespaceChar,
    whitespaceOptionalForProgram: peg$parsewhitespaceOptionalForProgram,
    whitespaceWithNewLine: peg$parsewhitespaceWithNewLine,
  };
  let peg$startRuleFunction = peg$parse__;

  const peg$c0 = "+";
  const peg$c1 = "<";
  const peg$c2 = "//";
  const peg$c3 = ">";
  const peg$c4 = "</";
  const peg$c5 = "/";
  const peg$c6 = "[";
  const peg$c7 = "]";
  const peg$c8 = "(";
  const peg$c9 = ")";
  const peg$c10 = "&";
  const peg$c11 = "|";
  const peg$c12 = "^";
  const peg$c13 = ",";
  const peg$c14 = "?";
  const peg$c15 = ":";
  const peg$c16 = "\u21D2";
  const peg$c17 = "=>";
  const peg$c18 = "\"";
  const peg$c19 = "...";
  const peg$c20 = "\u2026";
  const peg$c21 = "===";
  const peg$c22 = "!==";
  const peg$c23 = "==";
  const peg$c24 = "!=";
  const peg$c25 = "\\0";
  const peg$c26 = "\\b";
  const peg$c27 = "\\f";
  const peg$c28 = "\\n";
  const peg$c29 = "\\r";
  const peg$c30 = "\\t";
  const peg$c31 = "\\v";
  const peg$c32 = "\\";
  const peg$c33 = "`";
  const peg$c34 = "}";
  const peg$c35 = "\xBB";
  const peg$c36 = "'";
  const peg$c37 = "**";
  const peg$c38 = ".";
  const peg$c39 = "---\n";
  const peg$c40 = "\xAB";
  const peg$c41 = "&&";
  const peg$c42 = "||";
  const peg$c43 = "-";
  const peg$c44 = "-\n";
  const peg$c45 = "/*";
  const peg$c46 = "*/";
  const peg$c47 = "new";
  const peg$c48 = "new:";
  const peg$c49 = "\n";
  const peg$c50 = "\r\n";
  const peg$c51 = "\r";
  const peg$c52 = "??";
  const peg$c53 = "{";
  const peg$c54 = "=";
  const peg$c55 = "?.";
  const peg$c56 = "<=";
  const peg$c57 = ">=";
  const peg$c58 = "#!";
  const peg$c59 = "<<";
  const peg$c60 = ">>>";
  const peg$c61 = ">>";
  const peg$c62 = "\u2192";
  const peg$c63 = "->";
  const peg$c64 = "${";
  const peg$c65 = "~";
  const peg$c66 = "typeof";
  const peg$c67 = "void";

  const peg$r0 = /^[^\/>\t\n\r]/;
  const peg$r1 = /^[0-9]/;
  const peg$r2 = /^[ \t]/;
  const peg$r3 = /^[!+]/;
  const peg$r4 = /^[%-&*\^|]/;
  const peg$r5 = /^[.@~]/;
  const peg$r6 = /^[%*\/]/;
  const peg$r7 = /^[gimuy]/;
  const peg$r8 = /^[^\/\n\r]/;
  const peg$r9 = /^[^\n\r]/;
  const peg$r10 = /^[\/)\]}]/;
  const peg$r11 = /^[^\/,)\]}]/;
  const peg$r12 = /^[a-z]/;
  const peg$r13 = /^[a-z0-9+-.]/;
  const peg$r14 = /^[:]/;

  const peg$e0 = peg$literalExpectation("+", false);
  const peg$e1 = peg$literalExpectation("<", false);
  const peg$e2 = peg$literalExpectation("//", false);
  const peg$e3 = peg$literalExpectation(">", false);
  const peg$e4 = peg$literalExpectation("</", false);
  const peg$e5 = peg$literalExpectation("/", false);
  const peg$e6 = peg$classExpectation(["/", ">", "\t", "\n", "\r"], true, false, false);
  const peg$e7 = peg$otherExpectation("function arguments");
  const peg$e8 = peg$otherExpectation("array");
  const peg$e9 = peg$literalExpectation("[", false);
  const peg$e10 = peg$literalExpectation("]", false);
  const peg$e11 = peg$literalExpectation("(", false);
  const peg$e12 = peg$literalExpectation(")", false);
  const peg$e13 = peg$literalExpectation("&", false);
  const peg$e14 = peg$literalExpectation("|", false);
  const peg$e15 = peg$literalExpectation("^", false);
  const peg$e16 = peg$otherExpectation("function call");
  const peg$e17 = peg$literalExpectation(",", false);
  const peg$e18 = peg$otherExpectation("comment");
  const peg$e19 = peg$literalExpectation("?", false);
  const peg$e20 = peg$literalExpectation(":", false);
  const peg$e21 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e22 = peg$literalExpectation("\u21D2", false);
  const peg$e23 = peg$literalExpectation("=>", false);
  const peg$e24 = peg$otherExpectation("double quote string");
  const peg$e25 = peg$literalExpectation("\"", false);
  const peg$e26 = peg$literalExpectation("...", false);
  const peg$e27 = peg$literalExpectation("\u2026", false);
  const peg$e28 = peg$literalExpectation("===", false);
  const peg$e29 = peg$literalExpectation("!==", false);
  const peg$e30 = peg$literalExpectation("==", false);
  const peg$e31 = peg$literalExpectation("!=", false);
  const peg$e32 = peg$otherExpectation("backslash-escaped character");
  const peg$e33 = peg$literalExpectation("\\0", false);
  const peg$e34 = peg$literalExpectation("\\b", false);
  const peg$e35 = peg$literalExpectation("\\f", false);
  const peg$e36 = peg$literalExpectation("\\n", false);
  const peg$e37 = peg$literalExpectation("\\r", false);
  const peg$e38 = peg$literalExpectation("\\t", false);
  const peg$e39 = peg$literalExpectation("\\v", false);
  const peg$e40 = peg$literalExpectation("\\", false);
  const peg$e41 = peg$anyExpectation();
  const peg$e42 = peg$literalExpectation("`", false);
  const peg$e43 = peg$literalExpectation("}", false);
  const peg$e44 = peg$literalExpectation("\xBB", false);
  const peg$e45 = peg$literalExpectation("'", false);
  const peg$e46 = peg$literalExpectation("**", false);
  const peg$e47 = peg$otherExpectation("floating-point number");
  const peg$e48 = peg$literalExpectation(".", false);
  const peg$e49 = peg$literalExpectation("---\n", false);
  const peg$e50 = peg$otherExpectation("YAML front matter");
  const peg$e51 = peg$otherExpectation("parenthetical group");
  const peg$e52 = peg$otherExpectation("guillemet string");
  const peg$e53 = peg$literalExpectation("\xAB", false);
  const peg$e54 = peg$otherExpectation("HTTP/HTTPS host");
  const peg$e55 = peg$otherExpectation("JavaScript identifier continuation");
  const peg$e56 = peg$otherExpectation("JavaScript identifier start");
  const peg$e57 = peg$otherExpectation("function call with implicit parentheses");
  const peg$e58 = peg$classExpectation([" ", "\t"], false, false, false);
  const peg$e59 = peg$otherExpectation("integer");
  const peg$e60 = peg$classExpectation(["!", "+"], false, false, false);
  const peg$e61 = peg$classExpectation([["%", "&"], "*", "^", "|"], false, false, false);
  const peg$e62 = peg$classExpectation([".", "@", "~"], false, false, false);
  const peg$e63 = peg$otherExpectation("list");
  const peg$e64 = peg$literalExpectation("&&", false);
  const peg$e65 = peg$literalExpectation("||", false);
  const peg$e66 = peg$literalExpectation("-", false);
  const peg$e67 = peg$literalExpectation("-\n", false);
  const peg$e68 = peg$literalExpectation("/*", false);
  const peg$e69 = peg$literalExpectation("*/", false);
  const peg$e70 = peg$classExpectation(["%", "*", "/"], false, false, false);
  const peg$e71 = peg$literalExpectation("new", false);
  const peg$e72 = peg$literalExpectation("new:", false);
  const peg$e73 = peg$literalExpectation("\n", false);
  const peg$e74 = peg$literalExpectation("\r\n", false);
  const peg$e75 = peg$literalExpectation("\r", false);
  const peg$e76 = peg$otherExpectation("number");
  const peg$e77 = peg$literalExpectation("??", false);
  const peg$e78 = peg$otherExpectation("object literal");
  const peg$e79 = peg$literalExpectation("{", false);
  const peg$e80 = peg$otherExpectation("object getter");
  const peg$e81 = peg$literalExpectation("=", false);
  const peg$e82 = peg$otherExpectation("object key");
  const peg$e83 = peg$otherExpectation("object property");
  const peg$e84 = peg$otherExpectation("object identifier");
  const peg$e85 = peg$literalExpectation("?.", false);
  const peg$e86 = peg$otherExpectation("function arguments in parentheses");
  const peg$e87 = peg$otherExpectation("Origami program");
  const peg$e88 = peg$classExpectation(["g", "i", "m", "u", "y"], false, false, false);
  const peg$e89 = peg$classExpectation(["/", "\n", "\r"], true, false, false);
  const peg$e90 = peg$literalExpectation("<=", false);
  const peg$e91 = peg$literalExpectation(">=", false);
  const peg$e92 = peg$literalExpectation("#!", false);
  const peg$e93 = peg$classExpectation(["\n", "\r"], true, false, false);
  const peg$e94 = peg$literalExpectation("<<", false);
  const peg$e95 = peg$literalExpectation(">>>", false);
  const peg$e96 = peg$literalExpectation(">>", false);
  const peg$e97 = peg$otherExpectation("lambda function");
  const peg$e98 = peg$literalExpectation("\u2192", false);
  const peg$e99 = peg$literalExpectation("->", false);
  const peg$e100 = peg$otherExpectation("single quote string");
  const peg$e101 = peg$otherExpectation("string");
  const peg$e102 = peg$literalExpectation("${", false);
  const peg$e103 = peg$otherExpectation("template document");
  const peg$e104 = peg$otherExpectation("template literal");
  const peg$e105 = peg$otherExpectation("template substitution");
  const peg$e106 = peg$literalExpectation("~", false);
  const peg$e107 = peg$classExpectation(["/", ")", "]", "}"], false, false, false);
  const peg$e108 = peg$literalExpectation("typeof", false);
  const peg$e109 = peg$literalExpectation("void", false);
  const peg$e110 = peg$classExpectation(["/", ",", ")", "]", "}"], true, false, false);
  const peg$e111 = peg$otherExpectation("slash-separated path");
  const peg$e112 = peg$classExpectation([["a", "z"]], false, false, false);
  const peg$e113 = peg$classExpectation([["a", "z"], ["0", "9"], ["+", "."]], false, false, false);
  const peg$e114 = peg$classExpectation([":"], false, false, false);

  function peg$f0() {
    return null;
  }
  function peg$f1(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f2(scheme, path) {
    return annotate([scheme, ...path], location());
  }
  function peg$f3(path) {
    const external = annotate([markers.external, "/"], location());
    return annotate([markers.traverse, external, ...path], location());
  }
  function peg$f4(path) {
    const [head, ...tail] = path;
    const external = annotate([markers.external, head[1]], location());
    return annotate([markers.traverse, external, ...tail], location());
  }
  function peg$f5(chars, slashFollows) {
    // Append a trailing slash if one follows (but don't consume it)
    const key = chars.join("") + (slashFollows ? "/" : "");
    return annotate([ops.literal, key], location());
  }
  function peg$f6(entries) {
    return makeArray(entries ?? [], location());
  }
  function peg$f7(entries) {
    return annotate(entries, location());
  }
  function peg$f8() {
    return annotate([ops.literal, undefined], location());
  }
  function peg$f9(parameters, pipeline) {
    const lambdaParameters = parameters ?? annotate([], location());
    return annotate([ops.lambda, lambdaParameters, pipeline], location());
  }
  function peg$f10(parameter, pipeline) {
    return annotate([ops.lambda, parameter, pipeline], location());
  }
  function peg$f11(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f12(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f13(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f14(head, tail) {
    return tail.reduce(
      (target, args) => makeCall(target, args, location()),
      head
    );
  }
  function peg$f15(list) {
    return list.length === 1
      ? list[0]
      : annotate([ops.comma, ...list], location());
  }
  function peg$f16(expression) {
    return annotate([markers.property, expression], location());
  }
  function peg$f17(condition, tail) {
    if (!tail) {
      return condition;
    }
    const deferred = makeDeferredArguments(tail);
    return annotate([
      ops.conditional,
      condition,
      deferred[0],
      deferred[1]
    ], location());
  }
  function peg$f18(chars) {
    return annotate([ops.literal, chars.join("")], location());
  }
  function peg$f19() {
    console.warn("The use of the Unicode ellipsis character for an object spread is deprecated; use `...` (three periods) instead.");
  }
  function peg$f20(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f21() {    return "\0";  }
  function peg$f22() {    return "\b";  }
  function peg$f23() {    return "\f";  }
  function peg$f24() {    return "\n";  }
  function peg$f25() {    return "\r";  }
  function peg$f26() {    return "\t";  }
  function peg$f27() {    return "\v";  }
  function peg$f28() {
    error("Expected closing backtick");
  }
  function peg$f29() {
    error(`An object ended without a closing brace, or contained something that wasn't expected.\nThe top level of an object can only contain definitions ("a: b" or "a = b") or spreads ("...a").`);
  }
  function peg$f30() {
    error("Expected right bracket");
  }
  function peg$f31() {
    error("Expected right parenthesis");
  }
  function peg$f32() {
    error("Expected closing quote");
  }
  function peg$f33() {
    error("Expected an expression");
  }
  function peg$f34() {
    error("Expected \"---\"");
  }
  function peg$f35() {
    error("Expected closing guillemet");
  }
  function peg$f36() {
    error("Expected closing quote");
  }
  function peg$f37() {
    error("Expected an expression");
  }
  function peg$f38() {
    error("Expected an expression");
  }
  function peg$f39(left, right) {
    return right ? annotate([ops.exponentiation, left, right], location()) : left;
  }
  function peg$f40() {
    return annotate([ops.literal, parseFloat(text())], location());
  }
  function peg$f41() {
    return isOrigamiFrontMatter(input.slice(location().end.offset))
  }
  function peg$f42(chars) {
    return chars.join("");
  }
  function peg$f43(yaml) {
    return makeYamlObject(yaml, location());
  }
  function peg$f44(expression) {
    return annotate(expression, location());
  }
  function peg$f45(chars) {
    return annotate([ops.literal, chars.join("")], location());
  }
  function peg$f46(name, port, slashFollows) {
    const portText = port ? `:${port[1]}` : "";
    const slashText = slashFollows ? "/" : "";
    const host = name + portText + slashText;
    return annotate([ops.literal, host], location());
  }
  function peg$f47() {
    return text();
  }
  function peg$f48(id) {
    return id;
  }
  function peg$f49(id) {
    return annotate([ops.literal, id], location());
  }
  function peg$f50(char) {    return char.match(/[$_\p{ID_Continue}]/u)  }
  function peg$f51(char) {    return char.match(/[$_\p{ID_Start}]/u)  }
  function peg$f52(head, args) {
    return args ? makeCall(head, args, location()) : head;
  }
  function peg$f53(values) {
    return annotate(values, location());
  }
  function peg$f54() {
    return annotate([ops.literal, parseInt(text())], location());
  }
  function peg$f55() {
    return text();
  }
  function peg$f56(char) {    return char.match(/[$_\p{ID_Continue}]/u)  }
  function peg$f57(values) {
    return annotate(values, location());
  }
  function peg$f58(head, tail) {
    return tail.length === 0
      ? head
      : annotate(
        [ops.logicalAnd, head, ...makeDeferredArguments(tail)],
        location()
      );
  }
  function peg$f59(head, tail) {
    return tail.length === 0
      ? head
      : annotate(
        [ops.logicalOr, head, ...makeDeferredArguments(tail)],
        location()
      );
  }
  function peg$f60() {    return null;  }
  function peg$f61(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f62(head, tail) {
    const args = tail?.[0] !== undefined ? tail : [];
    return annotate([ops.construct, head, ...args], location());
  }
  function peg$f63(head, tail) {
    const args = tail?.[0] !== undefined ? tail : [];
    return annotate([ops.construct, head, ...args], location());
  }
  function peg$f64(head, tail) {
    return tail.length === 0
      ? head
      : annotate(
        [ops.nullishCoalescing, head, ...makeDeferredArguments(tail)],
        location()
      );
  }
  function peg$f65(entries) {
    return makeObject(entries ?? [], location());
  }
  function peg$f66(entries) {
    return annotate(entries, location());
  }
  function peg$f67(key, pipeline) {
    const getter = annotate([ops.getter, pipeline], location());
    return annotate([key, getter], location());
  }
  function peg$f68(hiddenKey) {    return hiddenKey.join("");  }
  function peg$f69(key, pipeline) {
    return annotate([key, pipeline], location());
  }
  function peg$f70(path) {
    const lastKey = path[0] === ops.unpack
      // [ops.unpack, [markers.traverse, [markers.reference, lastKey]]]
      ? path[1][1][1]
      // [markers.traverse, ..., [markers.reference, lastKey]
      : path.at(-1)[1];
    return annotate([lastKey, path], location());
  }
  function peg$f71(path) {
    // [markers.traverse, ..., [markers.reference, lastKey]]
    const lastKey = path.at(-1)[1];
    return annotate([lastKey, path], location());
  }
  function peg$f72(key, slash) {
    return text();
  }
  function peg$f73(string) {
    // Remove `ops.literal` from the string code
    return string[1];
  }
  function peg$f74(property) {
    return annotate([ops.optionalTraverse, property], location());
  }
  function peg$f75(key) {
    return annotate([ops.literal, key], location());
  }
  function peg$f76(list) {
    return annotate(list, location());
  }
  function peg$f77(param) {
    return annotate([param], location());
  }
  function peg$f78(list) {
    return annotate(list ?? [undefined], location());
  }
  function peg$f79(keys) {
    const args = keys ?? [];
    return annotate([markers.traverse, ...args], location());
  }
  function peg$f80(keys) {
    return makePath(keys);
  }
  function peg$f81(key) {
    return annotate([ops.literal, text()], location());
  }
  function peg$f82() {
    return annotate([ops.literal, text()], location());
  }
  function peg$f83(head, tail) {
    return annotate(
      tail.reduce((arg, fn) => makePipeline(arg, fn, location()), head),
      location()
    );
  }
  function peg$f84() {    return options.mode === "program"  }
  function peg$f85(property) {
    return annotate([markers.property, property], location());
  }
  function peg$f86(flags) {
    return flags.join("");
  }
  function peg$f87(chars, flags) {
    const regex = new RegExp(chars.join(""), flags);
    return annotate([ops.literal, regex], location());
  }
  function peg$f88(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f89() {    return null;  }
  function peg$f90() {    return options.mode === "shell"  }
  function peg$f91(head, tail) {
    return tail.reduce(makeBinaryOperation, head);
  }
  function peg$f92(definition) {
    if (options.mode === "program") {
      console.warn("Warning: the shorthand function syntax is deprecated in Origami programs. Use arrow syntax instead.");
    }
    const lambdaParameters = annotate(
      [annotate([ops.literal, "_"], location())],
      location()
    );
    return annotate([ops.lambda, lambdaParameters, definition], location());
  }
  function peg$f93() {    return null;  }
  function peg$f94(chars) {
    return annotate([ops.literal, chars.join("")], location());
  }
  function peg$f95() {
    return annotate([ops.literal, "/"], location());
  }
  function peg$f96() {
    return annotate([ops.literal, "/"], location());
  }
  function peg$f97() {
    return true;
  }
  function peg$f98(value) {
    return annotate([ops.spread, value], location());
  }
  function peg$f99(head, tail) {
    return makeTemplate(ops.templateIndent, head, tail, location());
  }
  function peg$f100(chars) {
    return annotate([ops.literal, chars.join("")], location());
  }
  function peg$f101(front, body) {
    return annotate(applyMacro(front, "_template", body), location());
  }
  function peg$f102(front, body) {
    return makeDocument(front, body, location());
  }
  function peg$f103(body) {
    if (options.front) {
      return makeDocument(options.front, body, location());
    }
    const lambdaParameters = annotate(
      [annotate([ops.literal, "_"], location())],
      location()
    );
    return annotate([ops.lambda, lambdaParameters, body], location());
  }
  function peg$f104(head, tail) {
    return makeTemplate(ops.templateText, head, tail, location());
  }
  function peg$f105(chars) {
    return annotate([ops.literal, chars.join("")], location());
  }
  function peg$f106(expression) {
    return annotate(expression, location());
  }
  function peg$f107(operator, expression) {
    return makeUnaryOperation(operator, expression, location());
  }
  function peg$f108(scheme, host, path) {
    const rest = path ? path[1] : [];
    const keys = annotate([host, ...rest], location());
    return makeCall(scheme, keys, location());
  }
  function peg$f109(scheme, keys) {
    return makeCall(scheme, keys, location());
  }
  function peg$f110(chars) {
    return annotate([ops.literal, text()], location());
  }
  function peg$f111() {
    // A single slash is a path key
    return annotate([ops.literal, ""], location());
  }
  function peg$f112(char) {    return /\s/.test(char);  }
  function peg$f113(char) {    return char;  }
  function peg$f114(keys) {
    return annotate(keys, location());
  }
  function peg$f115() {
    return annotate([markers.global, text()], location());
  }
  function peg$f116(char) {    return /\s/.test(char);  }
  function peg$f117(char) {    return char;  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parse__() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    peg$savedPos = s0;
    s1 = peg$f0();
    s0 = s1;

    return s0;
  }

  function peg$parseadditiveExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsemultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhitespace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseadditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemultiplicativeExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseadditiveOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemultiplicativeExpression();
              if (s7 !== peg$FAILED) {
                s3 = [ s5, s7 ];
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditiveOperator() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseminus();
    }

    return s0;
  }

  function peg$parseangleBracketLiteral() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseuriScheme();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c2) {
          s3 = peg$c2;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseangleBracketPath();
        if (input.charCodeAt(peg$currPos) === 62) {
          s5 = peg$c3;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseangleBracketPath();
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseangleBracketPath();
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseangleBracketPath() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseangleBracketKey();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c5;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseangleBracketKey();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s0 = s1;

    return s0;
  }

  function peg$parseangleBracketKey() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseangleBracketPathChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseangleBracketPathChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseslashFollows();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f5(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseangleBracketPathChar() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseescapedChar();
    }

    return s0;
  }

  function peg$parsearguments() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseparenthesesArguments();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepathArguments();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepropertyAccess();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecomputedPropertyAccess();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetemplateLiteral();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsearrayLiteral() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsearrayEntries();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseexpectClosingBracket();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parsearrayEntries() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsearrayEntry();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseseparator();
      if (s4 !== peg$FAILED) {
        s4 = peg$parsearrayEntry();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseseparator();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearrayEntry() {
    let s0, s1, s2, s3;

    s0 = peg$parsespreadElement();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepipelineExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c7;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f8();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsearrowFunction() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseparameterList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c9;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsedoubleArrow();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse__();
          s9 = peg$parseexpectPipelineExpression();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s3, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseparameterSingleton();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s3 = peg$parsedoubleArrow();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseexpectPipelineExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseconditionalExpression();
      }
    }

    return s0;
  }

  function peg$parsebitwiseAndExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseequalityExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhitespace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsebitwiseAndOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseequalityExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebitwiseAndOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseequalityExpression();
              if (s7 !== peg$FAILED) {
                s3 = [ s5, s7 ];
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwiseAndOperator() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 38) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwiseOrExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebitwiseXorExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhitespace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsebitwiseOrOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsebitwiseXorExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebitwiseOrOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsebitwiseXorExpression();
              if (s7 !== peg$FAILED) {
                s3 = [ s5, s7 ];
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwiseOrOperator() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 124) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwiseXorExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebitwiseAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhitespace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsebitwiseXorOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsebitwiseAndExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebitwiseXorOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsebitwiseAndExpression();
              if (s7 !== peg$FAILED) {
                s3 = [ s5, s7 ];
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f13(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwiseXorOperator() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 94) {
      s0 = peg$c12;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parsecallExpression() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseuriExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsearguments();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsearguments();
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parsecommaExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsepipelineExpression();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c13;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse__();
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s4 = peg$parsepipelineExpression();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecomment() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsemultiLineComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesingleLineComment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parsecomputedPropertyAccess() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecomputedPropertySpace();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c6;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpectExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpectClosingBracket();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomputedPropertySpace() {
    let s0, s1, s2;

    s0 = peg$parseshellMode();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseshellMode();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseconditionalExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parselogicalOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 63) {
        s4 = peg$c14;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        s6 = peg$parseshorthandFunction();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (input.charCodeAt(peg$currPos) === 58) {
            s8 = peg$c15;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse__();
            s10 = peg$parseshorthandFunction();
            if (s10 !== peg$FAILED) {
              s2 = [ s6, s10 ];
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f17(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedigits() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r1.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r1.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedoubleArrow() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 8658) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s0 = peg$c17;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
    }

    return s0;
  }

  function peg$parsedoubleQuoteString() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedoubleQuoteStringChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedoubleQuoteStringChar();
      }
      s3 = peg$parseexpectDoubleQuote();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parsedoubleQuoteStringChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c18;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsenewLine();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextChar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseellipsis() {
    let s0, s1;

    if (input.substr(peg$currPos, 3) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 8230) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f19();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseequalityExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parserelationalExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseequalityOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parserelationalExpression();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseequalityOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parserelationalExpression();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f20(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseequalityOperator() {
    let s0;

    if (input.substr(peg$currPos, 3) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c22) {
        s0 = peg$c22;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s0 = peg$c23;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseescapedChar() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f22();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s1 = peg$c27;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f23();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c28) {
            s1 = peg$c28;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f24();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c29) {
              s1 = peg$c29;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f25();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c30) {
                s1 = peg$c30;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e38); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f26();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c31) {
                  s1 = peg$c31;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f27();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c32;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e40); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e41); }
                    }
                    if (s2 !== peg$FAILED) {
                      s0 = s2;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseexpectBacktick() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 96) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f28();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectClosingBrace() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f29();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectClosingBracket() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f30();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectClosingParenthesis() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f31();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectDoubleQuote() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c18;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f32();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectExpression() {
    let s0, s1;

    s0 = peg$parseexpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f33();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectFrontDelimiter() {
    let s0, s1;

    s0 = peg$parsefrontDelimiter();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f34();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectGuillemet() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 187) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f35();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectSingleQuote() {
    let s0, s1;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c36;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f36();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectPipelineExpression() {
    let s0, s1;

    s0 = peg$parsepipelineExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f37();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexpectUnaryExpression() {
    let s0, s1;

    s0 = peg$parseunaryExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f38();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseexponentiationExpression() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseunaryExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c37) {
          s4 = peg$c37;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexponentiationExpression();
            if (s6 !== peg$FAILED) {
              s2 = s6;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parsecommaExpression();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s0 = s2;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloatLiteral() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedigits();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c38;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsedigits();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parsefrontDelimiter() {
    let s0;

    if (input.substr(peg$currPos, 4) === peg$c39) {
      s0 = peg$c39;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parsefrontMatterExpression() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsefrontDelimiter();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f41();
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpectExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpectFrontDelimiter();
          if (s4 !== peg$FAILED) {
            s0 = s3;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefrontMatterText() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsefrontDelimiter();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsefrontDelimiter();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f42(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsefrontMatterYaml() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsefrontDelimiter();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefrontMatterText();
      s3 = peg$parsefrontDelimiter();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parsegroup() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpectExpression();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpectClosingParenthesis();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseguillemetString() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 171) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseguillemetStringChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseguillemetStringChar();
      }
      s3 = peg$parseexpectGuillemet();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseguillemetStringChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 187) {
      s2 = peg$c35;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsenewLine();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextChar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehost() {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsehostname();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c15;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseintegerLiteral();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseslashFollows();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parsehostname() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseidentifier() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseidentifierStart();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseidentifierPart();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseidentifierPart();
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseidentifierLiteral() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseidentifierPart() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f50(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseidentifierStart() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f51(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseimplicitParenthesesCallExpression() {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearrowFunction();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseinlineSpace();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseinlineSpace();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseimplicitParensthesesArguments();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f52(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseimplicitParensthesesArguments() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseshellMode();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseshorthandFunction();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseseparator();
        if (s5 !== peg$FAILED) {
          s5 = peg$parseshorthandFunction();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseseparator();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f53(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinlineSpace() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseintegerLiteral() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedigits();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f54();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parsekey() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekeyCharStart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsekeyChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsekeyChar();
      }
      peg$savedPos = s0;
      s0 = peg$f55();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyChar() {
    let s0;

    s0 = peg$parsekeyCharStart();
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r3.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseminus();
        if (s0 === peg$FAILED) {
          s0 = input.charAt(peg$currPos);
          if (peg$r4.test(s0)) {
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsekeyCharStart() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f56(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (peg$r5.test(s0)) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
    }

    return s0;
  }

  function peg$parselist() {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsepipelineExpression();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseseparator();
      if (s4 !== peg$FAILED) {
        s4 = peg$parsepipelineExpression();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseseparator();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f57(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parselogicalAndExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsebitwiseOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s5 = peg$c41;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsebitwiseOrExpression();
        if (s7 !== peg$FAILED) {
          s3 = s7;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c41) {
          s5 = peg$c41;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsebitwiseOrExpression();
          if (s7 !== peg$FAILED) {
            s3 = s7;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f58(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselogicalOrExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsenullishCoalescingExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c42) {
        s5 = peg$c42;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parsenullishCoalescingExpression();
        if (s7 !== peg$FAILED) {
          s3 = s7;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c42) {
          s5 = peg$c42;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parsenullishCoalescingExpression();
          if (s7 !== peg$FAILED) {
            s3 = s7;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f59(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseminus() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c44) {
        s3 = peg$c44;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 62) {
          s4 = peg$c3;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiLineComment() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c46) {
        s5 = peg$c46;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c46) {
          s5 = peg$c46;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c46) {
        s3 = peg$c46;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f60();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplicativeExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexponentiationExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhitespace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemultiplicativeOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexponentiationExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemultiplicativeOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexponentiationExpression();
              if (s7 !== peg$FAILED) {
                s3 = [ s5, s7 ];
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f61(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplicativeOperator() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parsenewExpression() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsepathLiteral();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseparenthesesArguments();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f62(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepathLiteral();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparenthesesArguments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f63(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenewLine() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c49;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c50) {
        s0 = peg$c50;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c51;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
      }
    }

    return s0;
  }

  function peg$parsenumericLiteral() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsefloatLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseintegerLiteral();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parsenullishCoalescingExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parselogicalAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (input.substr(peg$currPos, 2) === peg$c52) {
        s5 = peg$c52;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parselogicalAndExpression();
        if (s7 !== peg$FAILED) {
          s3 = s7;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c52) {
          s5 = peg$c52;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parselogicalAndExpression();
          if (s7 !== peg$FAILED) {
            s3 = s7;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobjectLiteral() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseobjectEntries();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseexpectClosingBrace();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f65(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parseobjectEntries() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseobjectEntry();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseseparator();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseobjectEntry();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseseparator();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f66(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseobjectEntry() {
    let s0;

    s0 = peg$parsespreadElement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseobjectProperty();
      if (s0 === peg$FAILED) {
        s0 = peg$parseobjectGetter();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobjectShorthandProperty();
        }
      }
    }

    return s0;
  }

  function peg$parseobjectGetter() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseobjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c54;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseexpectPipelineExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseobjectHiddenKey() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c8;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseobjectPublicKey();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f68(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseobjectKey() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseobjectHiddenKey();
    if (s0 === peg$FAILED) {
      s0 = peg$parseobjectPublicKey();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parseobjectProperty() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseobjectKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c15;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseexpectPipelineExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseobjectShorthandProperty() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsepathLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f70(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseangleBracketLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f71(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parseobjectPublicKey() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f72(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsestringLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f73(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoptionalChaining() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.substr(peg$currPos, 2) === peg$c55) {
      s2 = peg$c55;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$parseidentifier();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f74(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparameter() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseparameterList() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseparameter();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseseparator();
      if (s4 !== peg$FAILED) {
        s4 = peg$parseparameter();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseseparator();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f76(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparameterSingleton() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseparameter();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseparenthesesArguments() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parselist();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse__();
      s5 = peg$parseexpectClosingParenthesis();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f78(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }

    return s0;
  }

  function peg$parsepathArguments() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepathKeys();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f79(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepathKeys() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsepathSegment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsepathSegment();
    }
    if (s1.length < 1) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepathLiteral() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepathKeys();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f80(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepathSegment() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsekey();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f81(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f82();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsepipelineExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseshorthandFunction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parsesingleArrow();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseshorthandFunction();
        if (s7 !== peg$FAILED) {
          s3 = s7;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parsesingleArrow();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseshorthandFunction();
          if (s7 !== peg$FAILED) {
            s3 = s7;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f83(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprimary() {
    let s0, s1, s2, s3;

    s0 = peg$parsestringLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsearrayLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseobjectLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegroup();
          if (s0 === peg$FAILED) {
            s0 = peg$parseangleBracketLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseregexLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetemplateLiteral();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsenumericLiteral();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parsekeyChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = undefined;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsepathLiteral();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseprogram() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseshebang();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseexpression();
    if (s2 !== peg$FAILED) {
      s0 = s2;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseprogramMode() {
    let s0;

    peg$savedPos = peg$currPos;
    s0 = peg$f84();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepropertyAccess() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsewhitespaceOptionalForProgram();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c38;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhitespaceOptionalForProgram();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifierLiteral();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f85(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregexFlags() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f86(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseregexLiteral() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseregexLiteralChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseregexLiteralChar();
      }
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c5;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseregexFlags();
        peg$savedPos = s0;
        s0 = peg$f87(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregexLiteralChar() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseescapedChar();
    }

    return s0;
  }

  function peg$parserelationalExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseshiftExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseinlineSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parserelationalOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseshiftExpression();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseinlineSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserelationalOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            s7 = peg$parseshiftExpression();
            if (s7 !== peg$FAILED) {
              s3 = [ s5, s7 ];
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f88(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationalOperator() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c56) {
      s0 = peg$c56;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c1;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c57) {
          s0 = peg$c57;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e91); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s0 = peg$c3;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseseparator() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c13;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewhitespaceWithNewLine();
      if (s1 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseshebang() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f89();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshellMode() {
    let s0;

    peg$savedPos = peg$currPos;
    s0 = peg$f90();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshiftExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseadditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseshiftOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        s7 = peg$parseadditiveExpression();
        if (s7 !== peg$FAILED) {
          s3 = [ s5, s7 ];
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseshiftOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s7 = peg$parseadditiveExpression();
          if (s7 !== peg$FAILED) {
            s3 = [ s5, s7 ];
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f91(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshiftOperator() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c60) {
        s0 = peg$c60;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c61) {
          s0 = peg$c61;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
      }
    }

    return s0;
  }

  function peg$parseshorthandFunction() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseshellMode();
    if (s1 === peg$FAILED) {
      s1 = peg$parseprogramMode();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c54;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c54;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          s5 = peg$parseimplicitParenthesesCallExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f92(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseimplicitParenthesesCallExpression();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parsesingleArrow() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 8594) {
      s0 = peg$c62;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c63) {
        s0 = peg$c63;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
    }

    return s0;
  }

  function peg$parsesingleLineComment() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e93); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f93();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingleQuoteString() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesingleQuoteStringChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsesingleQuoteStringChar();
      }
      s3 = peg$parseexpectSingleQuote();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f94(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parsesingleQuoteStringChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c36;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parsenewLine();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextChar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslash() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseslashFollows();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f95();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseslashes() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c5;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseslashFollows() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f97();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsespreadElement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseellipsis();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseexpectPipelineExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f98(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestringLiteral() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$parsedoubleQuoteString();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesingleQuoteString();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseshellMode();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseguillemetString();
          if (s2 !== peg$FAILED) {
            s0 = s2;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parsetemplateBody() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetemplateBodyText();
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parsetemplateSubstitution();
    if (s4 !== peg$FAILED) {
      s5 = peg$parsetemplateBodyText();
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parsetemplateSubstitution();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetemplateBodyText();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f99(s1, s2);
    peg$silentFails--;

    return s0;
  }

  function peg$parsetemplateBodyChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c64) {
      s2 = peg$c64;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextChar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplateBodyText() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetemplateBodyChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetemplateBodyChar();
    }
    peg$savedPos = s0;
    s1 = peg$f100(s1);
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parsetemplateDocument() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsefrontMatterExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parsetemplateBody();
      peg$savedPos = s0;
      s0 = peg$f101(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefrontMatterYaml();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetemplateBody();
        peg$savedPos = s0;
        s0 = peg$f102(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetemplateBody();
        peg$savedPos = s0;
        s1 = peg$f103(s1);
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parsetemplateLiteral() {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplateLiteralText();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsetemplateSubstitution();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsetemplateLiteralText();
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parsetemplateSubstitution();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsetemplateLiteralText();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parseexpectBacktick();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f104(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }

    return s0;
  }

  function peg$parsetemplateLiteralChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 96) {
      s2 = peg$c33;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s2 = peg$c64;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetextChar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplateLiteralText() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetemplateLiteralChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetemplateLiteralChar();
    }
    peg$savedPos = s0;
    s1 = peg$f105(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsetemplateSubstitution() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpectExpression();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c34;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f106(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }

    return s0;
  }

  function peg$parsetextChar() {
    let s0;

    s0 = peg$parseescapedChar();
    if (s0 === peg$FAILED) {
      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
    }

    return s0;
  }

  function peg$parseunaryExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseunaryOperator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseexpectUnaryExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f107(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecallExpression();
    }

    return s0;
  }

  function peg$parseunaryOperator() {
    let s0, s1, s2, s3;

    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = input.charAt(peg$currPos);
        if (peg$r10.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c66) {
          s0 = peg$c66;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e108); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c67) {
            s0 = peg$c67;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e109); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseminus();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseuri() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseuriScheme();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s2 = peg$c2;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsehost();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c5;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseuriPath();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f108(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseuriScheme();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepathKeys();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f109(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseuriExpression() {
    let s0;

    s0 = peg$parseuri();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenewExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseprimary();
      }
    }

    return s0;
  }

  function peg$parseuriKey() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseuriKeyChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseuriKeyChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f110(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f111();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseuriKeyChar() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r11.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      peg$savedPos = peg$currPos;
      s3 = peg$f112(s1);
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f113(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseescapedChar();
    }

    return s0;
  }

  function peg$parseuriPath() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseuriKey();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseuriKey();
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f114(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parseuriScheme() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r12.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r13.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r13.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e113); }
        }
      }
      s3 = input.charAt(peg$currPos);
      if (peg$r14.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f115();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespace() {
    let s0, s1;

    s0 = [];
    s1 = peg$parsewhitespaceChar();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecomment();
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespaceChar();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecomment();
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespaceChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f116(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f117(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhitespaceOptionalForProgram() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseprogramMode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseshellMode();
    }

    return s0;
  }

  function peg$parsewhitespaceWithNewLine() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseinlineSpace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseinlineSpace();
    }
    s2 = peg$parsecomment();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsenewLine();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse__();
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "__",
  "additiveExpression",
  "additiveOperator",
  "angleBracketLiteral",
  "angleBracketPath",
  "angleBracketKey",
  "angleBracketPathChar",
  "arguments",
  "arrayLiteral",
  "arrayEntries",
  "arrayEntry",
  "arrowFunction",
  "bitwiseAndExpression",
  "bitwiseAndOperator",
  "bitwiseOrExpression",
  "bitwiseOrOperator",
  "bitwiseXorExpression",
  "bitwiseXorOperator",
  "callExpression",
  "commaExpression",
  "comment",
  "computedPropertyAccess",
  "computedPropertySpace",
  "conditionalExpression",
  "digits",
  "doubleArrow",
  "doubleQuoteString",
  "doubleQuoteStringChar",
  "ellipsis",
  "equalityExpression",
  "equalityOperator",
  "escapedChar",
  "expectBacktick",
  "expectClosingBrace",
  "expectClosingBracket",
  "expectClosingParenthesis",
  "expectDoubleQuote",
  "expectExpression",
  "expectFrontDelimiter",
  "expectGuillemet",
  "expectSingleQuote",
  "expectPipelineExpression",
  "expectUnaryExpression",
  "exponentiationExpression",
  "expression",
  "floatLiteral",
  "frontDelimiter",
  "frontMatterExpression",
  "frontMatterText",
  "frontMatterYaml",
  "group",
  "guillemetString",
  "guillemetStringChar",
  "host",
  "hostname",
  "identifier",
  "identifierLiteral",
  "identifierPart",
  "identifierStart",
  "implicitParenthesesCallExpression",
  "implicitParensthesesArguments",
  "inlineSpace",
  "integerLiteral",
  "key",
  "keyChar",
  "keyCharStart",
  "list",
  "logicalAndExpression",
  "logicalOrExpression",
  "minus",
  "multiLineComment",
  "multiplicativeExpression",
  "multiplicativeOperator",
  "newExpression",
  "newLine",
  "numericLiteral",
  "nullishCoalescingExpression",
  "objectLiteral",
  "objectEntries",
  "objectEntry",
  "objectGetter",
  "objectHiddenKey",
  "objectKey",
  "objectProperty",
  "objectShorthandProperty",
  "objectPublicKey",
  "optionalChaining",
  "parameter",
  "parameterList",
  "parameterSingleton",
  "parenthesesArguments",
  "pathArguments",
  "pathKeys",
  "pathLiteral",
  "pathSegment",
  "pipelineExpression",
  "primary",
  "program",
  "programMode",
  "propertyAccess",
  "regexFlags",
  "regexLiteral",
  "regexLiteralChar",
  "relationalExpression",
  "relationalOperator",
  "separator",
  "shebang",
  "shellMode",
  "shiftExpression",
  "shiftOperator",
  "shorthandFunction",
  "singleArrow",
  "singleLineComment",
  "singleQuoteString",
  "singleQuoteStringChar",
  "slash",
  "slashes",
  "slashFollows",
  "spreadElement",
  "stringLiteral",
  "templateBody",
  "templateBodyChar",
  "templateBodyText",
  "templateDocument",
  "templateLiteral",
  "templateLiteralChar",
  "templateLiteralText",
  "templateSubstitution",
  "textChar",
  "unaryExpression",
  "unaryOperator",
  "uri",
  "uriExpression",
  "uriKey",
  "uriKeyChar",
  "uriPath",
  "uriScheme",
  "whitespace",
  "whitespaceChar",
  "whitespaceOptionalForProgram",
  "whitespaceWithNewLine"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
