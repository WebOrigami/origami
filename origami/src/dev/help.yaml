Dev:
  description: Develop and debug Origami projects
  commands:
    audit:
      args: (tree)
      description: Identify broken internal links and references
    breakpoint:
      args: (a)
      description: Break into the JavaScript debugger, then return a
    changes:
      args: (old, new)
      description: Return a tree of changes
    clear:
      args: (tree)
      description: Remove all values from the tree (alias of Tree.clear)
    crawl:
      args: (tree, base)
      description: A tree of a site's discoverable resources
    copy:
      args: (source, target)
      description: Copy the source tree to the target
    debug:
      args: (tree)
      description: Add debug features to the tree
    explore:
      args: ()
      description: Explore the current scope [when run in browser]
    help:
      args: (namespace|command)
      description: Get help on builtin namespaces and commands
    keys:
      args: (tree)
      description: The keys of the tree (alias of Tree.keys)
    log:
      args: (a, message)
      description: Log message to the console and return a
    serve:
      args: (tree, port)
      description: Start a web server for the tree
    stdin:
      description: Returns the content of the standard input stream
    svg:
      args: (tree, options)
      description: Render a tree visually in SVG format
    version:
      args: ()
      description: Return the version number of the Origami language
    watch:
      args: (tree, fn)
      description: Reevaluate fn when tree changes

Origami:
  description: Create sites and other digital artifacts
  commands:
    basename:
      args: (key)
      description: Removes an extension from the key if present
    config:
      description: The current project's configuration
    csv:
      args: (tree)
      description: Render the tree as a CSV file
    document:
      args: (text, [data])
      description: Create a document object with the text and data
    extension:
      description: Helpers for working with file extensions
    fetch:
      args: (url, options)
      description: Fetch a resource from a URL with support for extensions
    image:
      description: Collection of functions for working with images
    indexPage:
      args: (tree)
      description: A default index.html page for the tree
    inline:
      args: (text)
      description: Inline Origami expressions found in the text
    json:
      args: (obj)
      description: Render the object in JSON format
    jsonKeys:
      args: (tree)
      description: Add .keys.json files to a tree
    jsonParse:
      args: (text)
      description: Parse text as JSON
    mdHtml:
      args: (markdown)
      description: Render the markdown as HTML
    naturalOrder:
      description: A comparison function for natural sort order
    once:
      args: (fn)
      description: Run the function only once, return the same result
    ori:
      args: (text)
      description: Evaluate the text as an Origami expression
    post:
      args: (url, data)
      description: POST the given data to the URL
    project:
      description: The root folder for the current Origami project
    redirect:
      args: (url, options)
      description: Redirect to the given URL
    repeat:
      args: (n, obj)
      description: An array of n copies of the object
    rss:
      args: (feed)
      description: Transforms a JSON Feed tree to RSS XML
    shell:
      args: (text)
      description: Run the text as a shell command, return the output
    sitemap:
      args: (tree)
      description: Generate a sitemap for the tree
    slash:
      description: Helpers for working with trailing slashes
    slug:
      args: (text)
      description: A version of the text suitable for use in URLs
    static:
      args: (tree)
      description: Define common static files for the tree
    string:
      args: (obj)
      description: Coerce a buffer or document to a string
    toFunction:
      args: (obj)
      description: Coerce a tree or packed function definition to a function
    unpack:
      args: (buffer)
      description: Unpack the buffer into a usable form
    yaml:
      args: (obj)
      description: Render the object in YAML format
    yamlParse:
      args: (text)
      description: Parse text as YAML

Protocol:
  description: Retrieve resources via URL protocols
  commands:
    explore:
      description: Treat a website with JSON keys as a tree
    files:
      description: File system folders and files
    http:
      description: Web resources via HTTP
    https:
      description: Web resources via HTTPS
    httptree:
      description: Website tree via HTTP
    httpstree:
      description: Website tree via HTTPS
    node:
      description: Installed Node.js modules
    package:
      description: Packages installed in node_modules

Tree:
  description: Work with trees of files and data
  commands:
    addNextPrevious:
      args: (tree)
      description: Add next/previous fields to the tree's values
    assign:
      args: (target, source)
      description: Apply key/values from source to target
    cache:
      args: (tree, [cache])
      description: Caches values from the tree
    clear:
      args: (tree)
      description: Remove all values from the tree
    concat:
      args: (...objs)
      description: Concatenate text and/or trees of text
    constant:
      args: (value)
      description: Return a deep tree with a single constant value
    deepMap:
      args: (tree, options)
      description: Map the keys and values of a deep tree
    deepMerge:
      args: (...trees)
      description: Return a deeply-merged tree
    deepReverse:
      args: (tree)
      description: Reverse order of keys at all levels of the tree
    deepTake:
      args: (tree, n)
      description: The first n values from the deep tree
    deepText:
      args: (tree)
      description: The text values of the deep tree
    deepValues:
      args: (tree)
      description: The in-order leaf values of the tree
    defineds:
      args: (tree)
      description: Only the defined values of the tree
    entries:
      args: (tree)
      description: The tree's [key, value] pairs
    filter:
      args: (source, options)
      description: Filter the source tree
    first:
      args: (tree)
      description: The first value in the tree
    forEach:
      args: (tree, fn)
      description: Apply fn to each (value, key)
    from:
      args: (object, options)
      description: Create a tree from an object
    fromFn:
      args: (fn, [keys])
      description: A tree defined by a value function
    globKeys:
      args: (patterns)
      description: A tree whose keys can include glob wildcard patterns
    group:
      args: (tree, fn)
      description: A new tree with values grouped by the function
    has:
      args: (tree, key)
      description: True if key exists in tree
    indent:
      description: Tagged template literal for normalizing indentation
    inners:
      args: (tree)
      description: The tree's interior nodes
    isAsyncMutableTree:
      args: (object)
      description: True if object is an async mutable tree
    isAsyncTree:
      args: (object)
      description: True if object is an async tree
    isTraversable:
      args: (object)
      description: True if object is traversable
    isTreelike:
      args: (object)
      description: True if object can be coerced to a tree
    json:
      args: (tree)
      description: Render the tree in JSON format
    keys:
      args: (tree)
      description: The keys of the tree
    length:
      args: (tree)
      description: The tree's size (number of keys)
    map:
      args: (tree, options)
      description: Create a new tree by mapping keys and/or values
    mapReduce:
      args: (tree, valueFn, reduceFn)
      description: Map values and reduce them
    mask:
      args: (source, mask)
      description: Return the source tree with only the keys in the mask
    match:
      args: (pattern, fn, [keys])
      description: Matches simple patterns or regular expressions
    merge:
      args: (...trees)
      description: Return a new tree merging the given trees
    paginate:
      args: (tree, [n])
      description: Group the tree's values into fixed-size sets
    parent:
      args: (tree)
      description: The parent of the given tree node
    paths:
      args: (tree)
      description: Slash-separated paths for the tree's values
    plain:
      args: (tree)
      description: Render the tree as a plain JavaScript object
    regExpKeys:
      args: (tree)
      description: A tree whose keys are regular expression strings
    remove:
      args: (tree, key)
      description: Remove the value for the key from tree
    reverse:
      args: (tree)
      description: Reverse the order of the tree's keys
    root:
      args: (tree)
      description: The root node of the given tree
    setDeep:
      args: (target, source)
      description: Applies the source tree to the target
    shuffle:
      args: (tree)
      description: Shuffle the keys of the tree
    sort:
      args: (tree, options)
      description: A new tree with its keys sorted
    take:
      args: (tree, n)
      description: The first n values in the tree
    traverse:
      args: (tree, ...keys)
      description: Return the value at the path of keys
    traverseOrThrow:
      args: (tree, ...keys)
      description: Return the value at the path of keys or throw
    traversePath:
      args: (tree, path)
      description: Traverse a slash-separated path
    values:
      args: (tree)
      description: The tree's values
